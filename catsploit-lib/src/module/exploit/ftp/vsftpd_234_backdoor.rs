use crate::core::exploit::{remote_tcp::RemoteTcp, Exploit, Info, Kind, Ranking};

struct Vsftpd234Backdoor {
    remote_tcp: RemoteTcp,
}

impl Vsftpd234Backdoor {
    // TODO: When exploit is being used by CLI interaction, can get RHOST and RPORT there and pass it in
    fn new(remote_tcp: RemoteTcp) -> Vsftpd234Backdoor {
        Vsftpd234Backdoor { remote_tcp }
    }
}

impl Exploit for Vsftpd234Backdoor {
    fn kind() -> Kind {
        Kind::Remote
    }

    fn ranking() -> Ranking {
        Ranking::Excellent
    }

    fn info() -> Info {
        Info {
            name: "VSFTPD v2.3.4 Backdoor Command Execution".to_string(),
            description:
                "This module exploits a malicious backdoor that was added to the	VSFTPD download \
        archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between \
        June 30th 2011 and July 1st 2011 according to the most recent information \
        available. This backdoor was removed on July 3rd 2011."
                    .to_string(),
            license: None,
            author: Some(vec!["hdm".to_string(), "MC".to_string()]),
            references: None,
            platform: Some(vec!["unix".to_string()]),
        }
    }

    fn exploit(&self) -> Result<(), Box<dyn std::error::Error>> {
        self.remote_tcp.connect()?;
        Ok(())
    }
}
