use std::error::Error;

struct Info {
    name: String,
    description: String,
    license: Option<String>,
    author: Option<Vec<String>>,
    references: Option<Vec<String>>,
    platform: Option<Vec<String>>,
}

enum Ranking {
    /// The exploit will never crash the service and will work on common platforms and versions
    Excellent,
    /// The exploit will work on most platforms and versions and is unlikely to crash the service
    High,
    /// The exploit generally works, but may fail on certain platforms and versions
    Average,
    /// The exploit has less than a 50% chance of working for common platforms
    Low,
}

enum Kind {
    Remote,
    Local,
    Multiple,
}

struct PayloadCompat {
    reverse: bool,
    tunnel: bool,
}

impl Default for PayloadCompat {
    fn default() -> PayloadCompat {
        PayloadCompat {
            reverse: true,
            tunnel: false,
        }
    }
}

trait Exploit {
    fn kind() -> Kind {
        Kind::Multiple
    }

    fn ranking() -> Ranking {
        Ranking::Average
    }

    fn payload_compat() -> PayloadCompat {
        PayloadCompat::default()
    }

    fn description() -> String;

    fn exploit() -> Result<(), Box<dyn Error>>;
}
